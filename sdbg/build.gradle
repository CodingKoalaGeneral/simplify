version = '0.1.0'
mainClassName = 'org.cf.sdbg.Main'

dependencies {
    implementation project(':smalivm')
    implementation depends.commons_cli
    implementation group: 'info.picocli', name: 'picocli-shell-jline3', version: '4.1.4'
    implementation group: 'info.picocli', name: 'picocli-codegen', version: '4.1.4'
    implementation group: 'org.fusesource.jansi', name: 'jansi', version: '1.18'
    implementation depends.slf4j_api
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    testImplementation project(':smalivm').sourceSets.test.output
    testImplementation project(':smalivm').sourceSets.test.resources
    testImplementation depends.mockito
    testImplementation depends.junit_compile
    testRuntimeOnly depends.junit_engine
    testRuntimeOnly depends.junit_runner
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

//compileKotlin {
//    kotlinOptions {
//        jvmTarget = JavaVersion.VERSION_1_8
//    }
//}
//compileTestKotlin {
//    kotlinOptions {
//        jvmTarget = JavaVersion.VERSION_1_8
//    }
//}

test.dependsOn project(':smalivm').tasks.getByName('testClasses')

task fatJar(type: Jar, dependsOn: ':smalivm:fatJar') {
    manifest {
        attributes('Main-Class': mainClassName)
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    doLast {
        if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
            ant.symlink(link: file("${destinationDirectory.get()}/sdbg.jar"), resource: archiveFile.get(), overwrite: true)
        }
    }
}
